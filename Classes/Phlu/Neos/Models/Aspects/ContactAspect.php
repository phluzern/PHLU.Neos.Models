<?php

namespace Phlu\Neos\Models\Aspects;


use Neos\Neos\Domain\Service\ContentContextFactory;
use Phlu\Neos\Models\Domain\Model\Contact;
use Phlu\Neos\Models\Domain\Repository\ContactRepository;
use Neos\Flow\Annotations as Flow;
use Neos\Eel\FlowQuery\FlowQuery;
use Neos\Flow\Aop\JoinPointInterface;
use Neos\Flow\Error\Exception;
use Neos\Flow\Persistence\Doctrine\PersistenceManager;
use Neos\Neos\Domain\Service\SiteService;
use Neos\ContentRepository\Domain\Model\NodeData;
use Neos\ContentRepository\Domain\Repository\NodeDataRepository;
use Neos\ContentRepository\Domain\Service\NodeTypeManager;
use Neos\ContentRepository\Domain\Model\NodeInterface;

/**
 * @Flow\Scope("singleton")
 * @Flow\Aspect
 */
class ContactAspect
{


    /**
     * @Flow\Inject
     * @var ContentContextFactory
     */
    protected $contentContextFactory;


    /**
     * @Flow\Inject
     * @var \Neos\ContentRepository\Domain\Repository\WorkspaceRepository
     */
    protected $workspaceRepository;


    /**
     * @Flow\Inject
     * @var PersistenceManager
     */
    protected $persistenceManager;

    /**
     * @Flow\Inject
     * @var ContactRepository
     */
    protected $contactRepository;


    /**
     * @Flow\Inject
     * @var NodeDataRepository
     */
    protected $nodeDataRepository;


    /**
     * @Flow\Inject
     * @var NodeTypeManager
     */
    protected $nodeTypeManager;


    /**
     * @param Contact $contact
     * @throws \Neos\Flow\Persistence\Exception\IllegalObjectTypeException
     * @return mixed
     */
    protected function findContactNodesAndUpdate(Contact $contact)
    {


        $contactid = false;
        $workspace = 'live';

        foreach ($this->nodeDataRepository->findByParentAndNodeTypeRecursively(SiteService::SITES_ROOT_PATH, 'Phlu.Corporate:Contact', $this->workspaceRepository->findByName($workspace)->getFirst()) as $node) {
            if ($node->getProperty('contact') == $contact->getEventoid()) {
                $this->nodeDataRepository->update($this->updateContactNode($node, $contact));
                $contactid = $contact->getEventoid();
            }
        }


        if ($contactid === false) {

            // create contact node
            $baseNode = $this->nodeDataRepository->findOneByIdentifier('7f434ec8-ad74-4032-a8fe-6842c4d3e4a1', $this->workspaceRepository->findByIdentifier('live'));
            if ($baseNode) {
                /* @var $baseNodeDatabase NodeData */
                $baseNodeDatabase = $this->nodeDataRepository->findOneByPath($baseNode->getPath() . "/database", $this->workspaceRepository->findByIdentifier('live'));
                if ($baseNodeDatabase !== null) {
                    $nodeType = $this->nodeTypeManager->getNodeType('Phlu.Corporate:Contact');
                    if ($this->nodeDataRepository->findOneByPath($baseNodeDatabase->getPath() . "/" . 'contact-' . $contact->getEventoid(), $this->workspaceRepository->findByIdentifier('live')) === null) {
                        $contactNode = $baseNodeDatabase->createNodeData('contact-' . $contact->getEventoid(), $nodeType);
                        $contactNode->setProperty('contact', $contact->getEventoid());
                        $this->nodeDataRepository->update($this->updateContactNode($contactNode, $contact));
                    }
                }
            } else {
                return null;
            }


        }


        $contact->setHasChanges(false);
        $this->contactRepository->update($contact);


    }


    /**
     * @param NodeData $node
     * @param Contact $contact
     * @return NodeData
     */
    public function updateContactNode(NodeData $node, Contact $contact)
    {


        // calculate custom function based on organisation
        $p = 0;
        $n = $node;
        $organisations = array();
        while ($p < 10 && $n) {
            if ($n->getNodeType()->getName() == 'Phlu.Corporate:SectionAutoGeneratedContentContactsList' && $n->getProperty('organisations')) {
                foreach ($n->getProperty('organisations') as $k => $o) {
                    $organisations[$o] = true;
                }
                $n == null;
            } else {
                $n = $n->getParent();
            }
            $p++;
        }

        $p = 0;
        $n = $node;
        while ($p < 10 && $n) {
            if ($n->getNodeType()->getName() == 'Phlu.Corporate:ContactsGroup' && $n->getProperty('ppdbid')) {
                $organisations[$n->getProperty('ppdbid')] = true;
                $n == null;
            } else {
                $n = $n->getParent();
            }
            $p++;
        }


        $customFunction = null;
        if ($organisations) {
            foreach ($contact->getOrganisations() as $org) {
                if (isset($organisations[$org['OrganisationId']]) && isset($org['Funktion'])) {
                    $customFunction = $org['Funktion'];
                }
            }
        }
        if ($customFunction) {
            $node->setProperty('functionCustom', $customFunction);
        }

        // update default properties
        $node->setProperty('firstname', $contact->getName()->getFirstName());
        $node->setProperty('title', $contact->getName()->getFullName());
        $node->setProperty('lastname', $contact->getName()->getLastName());
        $node->setProperty('titlename', $contact->getName()->getTitle());
        $node->setProperty('street', $contact->getStreet());
        $node->setProperty('street2', $contact->getStreetnote());
        $node->setProperty('zip', $contact->getZip());
        $node->setProperty('city', $contact->getCity());
        $node->setProperty('email', $contact->getEmail());
        $node->setProperty('phone', $contact->getPhone());
        $node->setProperty('eventoid', $contact->getEventoid());
        $node->setProperty('organisations', $contact->getOrganisations());
        $node->setProperty('shorthandSymbol', $contact->getShorthandSymbol());


        $node->setProperty('function', $contact->getFunction());

        $unchangedImage = false;

        if ($contact->getImage() && $contact->getImage()->getResource() && $node->getProperty('image') && $node->getProperty('image')->getResource() && $node->getProperty('image')->getResource()->getSha1() == $contact->getImage()->getResource()->getSha1()) {
            $unchangedImage = true;
        }

        if ($unchangedImage == false) {
            $node->setProperty('image', $contact->getImage());
        }


        return $node;


    }


    /**
     * @Flow\After("method(Phlu\Neos\Models\Domain\Repository\ContactRepository->add|update())")
     * @return void
     */
    public function update(JoinPointInterface $joinPoint)
    {


        $this->findContactNodesAndUpdate($joinPoint->getMethodArgument('object'));

    }


    /**
     * Update contact node programmatically
     * @param NodeInterface $node
     * @param string $propertyName name of the property that has been changed/added
     * @param mixed $oldValue the property value before it was changed or NULL if the property is new
     * @param mixed $newValue the new property value
     * @return void
     */
    public function updateContactNodeData(NodeInterface $node, $propertyName, $oldValue, $newValue)
    {


        if ($node->getNodeType()->getName() == 'Phlu.Corporate:Contact' && $propertyName == 'contact') {

            if ($oldValue !== $newValue) {
                $contact = $this->contactRepository->getOneByEventoId($newValue);
                if ($contact) {
                    $this->updateContactNode($node->getNodeData(), $contact);
                }
            }


        }


//        $object = $joinPoint->getMethodArgument('node');
//
//        if ($object->getProperty('contact') != 0) {
//
//            $oldobject = $this->nodeDataRepository->findOneByIdentifier($object->getIdentifier(), $object->getWorkspace());
//            \Neos\Flow\var_dump($oldobject->getProperty('contact'),$object->getProperty('contact'));
//            if ($oldobject->getProperty('contact') !== $object->getProperty('contact')) {
//                $contact = $this->contactRepository->getOneByEventoId($object->getProperty('contact'));
//                if ($contact) {
//                    $this->updateContactNode($object, $contact);
//                }
//            }
//
//
//        }
//

    }


}
